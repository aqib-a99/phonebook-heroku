{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["Filter","change","value","list","onChange","map","ListElement","key","number","name","PersonForm","submit","nameOnChange","nameData","numberOnChange","numberData","onSubmit","type","Persons","props","data","onClick","handleDelete","Notification","message","className","Alert","PORT","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","filteredList","setFilteredList","setMessage","alert","setAlert","useEffect","axios","get","then","response","catch","setTimeout","event","console","log","target","length","filterString","x","person","includes","vals","preventDefault","personName","phoneNumber","nameList","numberList","personObject","post","receiveData","concat","nameRepeat","window","confirm","storedObject","find","p","replacementObject","put","id","delete","handleDeletePressed","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.f7097e22.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({change, value, list}) => {\n    return(\n        <div>\n        filter shown with: <input onChange = {change} value = {value}/>  \n        <ul>\n          {list.map(ListElement => <li key = {ListElement.number}>{ListElement.name} <strong>{ListElement.number}</strong></li>)}\n        </ul>\n      </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst PersonForm = ({submit, nameOnChange, nameData, numberOnChange, numberData}) => {\n    return(<form onSubmit = {submit}>\n          name: <input onChange = {nameOnChange} value = {nameData}/>\n          <div>number: <input onChange = {numberOnChange} value = {numberData}/></div>\n          <button type=\"submit\">add</button>\n      </form>)\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Persons = (props) => {\n  return(\n    <li key = {props.key}> {props.data.name} <strong>{props.data.number}</strong><button onClick = {props.handleDelete}>Delete</button></li>\n  )\n}\n\nexport default Persons","import React from 'react'\n\nconst Notification = ({message}) => {\n    if(message === null){\n        return null\n    }\n\n    return(\n        <div className = \"addNotif\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Alert = ({message}) => {\n    if(message === null){\n        return null\n    }\n\n    return(\n        <div className = \"alertNotif\">\n            {message}\n        </div>\n    )\n}\n\nexport default Alert","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\nimport Alert from './components/Alert'\nconst PORT = \"/api/persons\"\n\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ filteredList, setFilteredList ] = useState([])\n  const [ message, setMessage ] = useState(null)\n  const [ alert, setAlert ] = useState(null)\n\n\n  useEffect(() => {\n    axios\n      .get(PORT)\n      .then(response => {\n        setPersons(response.data)\n      })\n      .catch(() => {\n        setMessage('Data not found in directory')\n        setTimeout(() => setMessage(null), 3000)\n      })\n  },[])\n  \n  const addData = (event) => {\n    event.preventDefault()\n    const personName = newName\n    const phoneNumber = newNumber\n    let nameList = []\n    let numberList = []\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    if(personName.length !== '' && phoneNumber !== ''){\n      nameList = persons.filter(person => person.name === personName)\n      numberList = persons.filter(person => person.number === phoneNumber)\n      if(nameList.length === 0 && numberList.length === 0){\n        axios\n          .post(PORT, personObject)\n          .then(response => response.data)\n          .then(receiveData => {\n            setMessage(`Contact \"${personObject.name}\" added to directory.`)\n            setTimeout(() => setMessage(null), 3000)\n            setPersons(persons.concat(personObject))\n          })\n          .catch(() => {\n            setMessage('Data not found in directory')\n            setTimeout(() => {\n              setMessage(null)\n            }, 3000)\n          }\n          )\n      }\n    else{\n      const nameRepeat = nameList.length !== 0 ? true : false\n      const phoneRepeat = numberList.length !== 0 ? true: false\n      if(phoneRepeat) window.alert(`${phoneNumber} already exists in the database`)\n      if(nameRepeat) {\n        let x = window.confirm(`${personName} is already added to the phonebook, replace the old number with the new one?`)\n        if(x){\n          let storedObject = persons.find(p => p.name === newName)\n          const replacementObject = {...storedObject, number: newNumber}\n          axios\n            .put(`${PORT}/${storedObject.id}`, replacementObject)\n            .then(response => setPersons(persons.map(p => p.name === personObject.name ? response.data : p))\n            )\n            .catch(() => {\n              setMessage('Data not found in directory')\n              setTimeout(() => setMessage(null), 3000)\n            })\n          }}\n        \n      \n        }\n    setNewName('')\n    setNewNumber('')\n    }\n  }\n\n\n  const handleDataChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setFilter(event.target.value)\n    if(filter.length === 0){\n      setFilteredList([])\n    }\n    else {\n      const filterString = event.target.value\n      let val = persons.filter(person => person.name.includes(filterString))\n      let x = val.filter(vals => !filteredList.includes(vals))\n      setFilteredList(x)\n      } \n    }\n\n  const handleDeletePressed = (person) => {\n    let x = persons.filter(p => p.id !== person.id)\n    if(window.confirm(`Are you sure you want to delete ${person.name}`)){\n      console.log(x)\n      setPersons(x)\n      axios.delete(`${PORT}/${person.id}`)\n      .then(() => {\n        setAlert(`Contact ${person.name} deleted from directory`)\n        setTimeout(() => setAlert(null), 3000)\n      })\n        .catch(() => {\n          console.log('Information already removed from directory.')\n          setAlert(`Information for ${person.name} has already been removed from the directory`)\n          setTimeout(() => {\n            setAlert(null) \n          }, 3000)\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message = {message}/>\n      <Alert message = {alert} />\n      <Filter change = {handleFilterChange} value = {filter} list = {filteredList}/>\n      <PersonForm submit = {addData} nameOnChange = {handleDataChange} nameData = {newName} numberOnChange = {handleNumberChange} numberData = {newNumber} />\n      <h2>Numbers</h2>\n      <ul>\n        {persons.map(person => \n          <Persons key = {person.id} data = {person} handleDelete = {() => handleDeletePressed(person)}/>\n          )}\n      </ul>\n    </div>\n  )\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}